#version 460 core
#extension GL_EXT_ray_tracing : require

// Minimal Payload
struct RayPayload {
    vec3 color;
};

// Input/Output layout qualifiers
layout(location = 0) rayPayloadEXT RayPayload payload;

// Descriptor Set Bindings (Required)
layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 projection;
    mat4 view;
    mat4 inverseProjection;
    mat4 inverseView;
} cameraUbo;

layout(set = 1, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 1, binding = 1, rgba16f) uniform image2D outputImage; // Match format used in C++

void main() {
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 uv = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    const vec2 d = uv * 2.0 - 1.0;

    vec4 origin = cameraUbo.inverseView * vec4(0, 0, 0, 1);
    vec4 target = cameraUbo.inverseProjection * vec4(d.x, d.y, 1, 1);
    vec4 direction = cameraUbo.inverseView * vec4(normalize(target.xyz), 0);

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    uint cullMask = 0xFF;
    float tMin = 0.001;
    float tMax = 10000.0;

    // Initialize payload (simple black)
    payload.color = vec3(0.0, 0.0, 0.0);

    traceRayEXT(
        topLevelAS,
        rayFlags,
        cullMask,
        0, // sbtRecordOffset
        0, // sbtRecordStride
        1, // missIndex (points to the single miss shader record)
        origin.xyz,
        tMin,
        direction.xyz,
        tMax,
        0 // payload location
    );

    // Write final color from payload to output image
    imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(payload.color, 1.0));
}